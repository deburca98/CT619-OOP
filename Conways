
package workshop1;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import jdk.internal.misc.FileSystemOption;
import java.util.Random;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.awt.image.*;
public class ConwaysLife2 extends JFrame implements Runnable, MouseListener {
// member data
private BufferStrategy strategy;
private Graphics offscreenBuffer;
// lecture mentiond 3D array with these 
private boolean gameState[][][] = new boolean[40][40][2];

//private boolean isInitialised =false;
private boolean IsGameInProgress = false;
private int frontBuffer=0;
// constructor
public ConwaysLife2 () {
 //Display the window, centred on the screen
	Dimension screensize =java.awt.Toolkit.getDefaultToolkit().getScreenSize();
	int x = screensize.width/2 - 400;
	int y = screensize.height/2 - 400;
	setBounds(x, y, 800, 800);
	setVisible(true);
	this.setTitle("Conway's game of life");

 // initialise double-buffering
	createBufferStrategy(2);
	strategy = getBufferStrategy();
	offscreenBuffer = strategy.getDrawGraphics();

 // register the Jframe itself to receive mouse events
	addMouseListener(this);

 // initialise the game state
	for (int m=0;m<40;m++) {
		for (int n=0;n<40;n++) {
			for (int z=0; z<2; z++) {
			gameState[m][n][z]=false;
			}
		}
		//isInitialised= true;	
	}
	
 // create and start our animation thread
	Thread t = new Thread(this);
	t.start();
	
	//isInitialised = true;//** added
}

// thread's entry point
public void run() {
	while ( 1==1 ) {
// 1: sleep for 1/5 sec
		try {
			Thread.sleep(200);
		} catch (InterruptedException e) { }
		
		if(IsGameInProgress) {
			spawnNewGame();
		}
		// 2: animate game objects [nothing yet!]
		//3: force an application repaint
		this.repaint();
		}
}


//mouse events which must be implemented for MouseListener
public void mousePressed(MouseEvent e) {
// determine which cell of the gameState array was clicked on
	int x = e.getX()/20;
	int y = e.getY()/20;
	
	/* Added Text*****/
	 
	 // needed to add cordinates of the  buttons using if statement to add functionality
	 
	 /*******START BUTTON******/
	 // this changes game status playing from false to true (private boolean playing )
	 
	 if ((e.getX() >=20 && e.getX()<= 90) && (e.getY()>=40 && e.getY()<=70)) {
		
		 IsGameInProgress = true;
		 
		 
		 // switches gamestate to true when run button is pressed
	 }
	 		/*Random Button*/
	 if ((e.getX()>= 150 && e.getX()<= 220) && (e.getY()>=40 && e.getY()<=70)){
		// call random method
		 random();
		 
		
	 }
	 			/* load Image */
	 if ((e.getX()>= 280 && e.getX()<= 340) && (e.getY()>=40 && e.getY()<=70)){
		 loadImage();
	 }
	 /* Save Image */
	 if ((e.getX()>= 410 && e.getX()<= 470) && (e.getY()>=40 && e.getY()<=70)){
		
			try {
				saveImage();
			} catch (IOException e1) {
				
			}
		
	 }
	 
	 		/**Stop Button*/
	 if ((e.getX() >=550 && e.getX()<= 615) && (e.getY()>=40 && e.getY()<=70)) {
			
		 IsGameInProgress = false;
		 
		 // switches gamestate to false is pressed
	 }
	 
// toggle the state of the cell
	gameState[x][y][frontBuffer] = !gameState[x][y][frontBuffer];
// request an extra repaint, to get immediate visual feedback
	this.repaint();
}
private void saveImage() throws IOException {
	
	// goes through the board sees if cells are true assigns 1 will export array to txt file
	String filename = "C:\\Users\\burked\\eclipse-workspace\\workshop1\\src\\workshop1||lifegame.txt";
	for (int x=0;x<40;x++) {
		for (int y=0;y<40;y++) {
			for(int z =0; z<2;z++);{
			int z = 0;
			BufferedWriter writer =new BufferedWriter(new FileWriter(filename));
			if (gameState[x][y][z]) {
			
			writer.write(1);
			}else {
				writer.write(0);
			}
			writer.close();
			}
			
			}
			}
		}

private void loadImage() {
	getNewBoard();
	
}
// Imports the txt file as an array of strings would be used to "feed" game state values
public static char[][] getNewBoard() {
	
	
}

// this method goes through each pixel assigns a true or false random value 
// 
public void random(){
    Random random = new Random();
    for (int x = 0; x < 40; x++) {
        for (int y = 0; y < 40; y++){
        	for(int z=0; z<2;z ++) {
            gameState[x][y][z]=(random.nextBoolean());
        	} 
        }
    }

    this.repaint();
}

public void mouseReleased(MouseEvent e) { }
public void mouseEntered(MouseEvent e) { }
public void mouseExited(MouseEvent e) { }
public void mouseClicked(MouseEvent e) { }
//
//application's paint method
public void paint(Graphics g) {
	//if(!isInitialised)
		//return;
	g = offscreenBuffer; // draw to offscreen buffer
//clear the canvas with a big black rectangle
	g.setColor(Color.BLACK);
	g.fillRect(0, 0, 800, 800);
	g.setColor(Color.WHITE);
	for (int x=0;x<40;x++) {
		for (int y=0;y<40;y++) {
			if (gameState[x][y][frontBuffer]) {
				g.fillRect(x*20, y*20, 20, 20);
			}
		}
	}
	// here the buttons appear when the game is off 
	if(!IsGameInProgress) {
	
	g.setColor(Color.green);
	g.fillRect(20, 40, 70, 30);
	g.fillRect(150, 40, 70, 30);
	g.fillRect(280, 40, 70, 30);
	g.setColor(Color.red);
	g.fillRect(410, 40, 70, 30);
	 // set font and text colour
	g.setFont(new Font("ARIAL", Font.PLAIN, 15));
	g.setColor(Color.BLACK);
	g.drawString("Run!", 20, 60);
    g.drawString("Random", 150, 62);
    g.drawString("Load", 280, 62);
    g.setColor(Color.WHITE);
    g.drawString(" Save", 410, 62);
    
	}
    //redraw all game objects
	if (IsGameInProgress) {
		
		// redraw the screen to remove false state buttons
		//g.setColor(Color.BLACK);
		//g.fillRect(0, 0, 800, 800);
		g.setColor(Color.red);
		g.fillRect(550, 40, 70, 30);
		g.setFont(new Font("ARIAL", Font.PLAIN, 15));
		g.setColor(Color.WHITE);
		g.drawString("Stop!", 550, 60);
		
}
	
	//flip the buffers
	strategy.show();
}
private void spawnNewGame() {
	
	// apply game rules to game state front buffer, copying results into back buffer
	int front = frontBuffer;
	int back = (front+1)%2;
    for (int x=0;x<40;x++) {
    	for (int y=0;y<40;y++) {
    		// count the neighbours of cell x,y
    		int isAliveNeighbours=0;
    		for (int xx=-1;xx<=1;xx++) {
    			for (int yy=-1;yy<=1;yy++) {
    				if (xx!=0 || yy!=0) {
    					int xxx=x+xx;
    					if (xxx<0) // boundary check
    						xxx=39;
    					else if (xxx>39)
    						xxx=0;
    					int yyy=y+yy;
    					if (yyy<0)
    						yyy=39;
    					else if (yyy>39)
    						yyy=0;           					
    					if (gameState[xxx][yyy][front])
    						isAliveNeighbours++;
    				}
    			}
    		}

    		// apply rules
    		if (gameState[x][y][front]) {
    			// cell x,y was alive
       // #1. Any live cell with fewer than two live neighbours dies
    			if (isAliveNeighbours<2)
    				gameState[x][y][back] = false;
       // #2. Any live cell with two or three live neighbours lives
    			else if (isAliveNeighbours<4)
    				gameState[x][y][back] = true;
       // #3. Any live cell with more than three live neighbours dies   
    			else
    				gameState[x][y][back] = false;
    		}
    		else {
    			// cell x,y was dead
    			// #4. Dead cells with three live neighbours become live
    			if (isAliveNeighbours==3)
    				gameState[x][y][back] = true;
    			else
    				gameState[x][y][back] = false;
    		}
    	}
    }
	
	// now flip the game state buffers
    frontBuffer = back;		
}
//application entry point
public static void main(String[] args) {
ConwaysLife2 w = new ConwaysLife2();
}
}
